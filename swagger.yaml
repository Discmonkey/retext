openapi: 3.0.3

info:
  title: EMPIRE API
  version: '0.9'

components:
  parameters:
    projectId:
      in: query
      name: project_id
      required: true
      schema:
        $ref: '#/components/schemas/Id'

    fileId:
      in: query
      name: file_id
      schema:
        $ref: '#/components/schemas/Id'

    codeId:
      in: query
      name: code_id
      schema:
        $ref: '#/components/schemas/Id'

    textId:
      in: query
      name: text_id
      schema:
        $ref: '#/components/schemas/Id'

  schemas:
    Code:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        container:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        texts:
          type: array
          items:
            $ref: '#/components/schemas/DocumentText'
      required:
        - name
        - texts
        - container

    CodeContainer:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        order:
          type: number
        codes:
          type: array
          items:
            $ref: '#/components/schemas/Code'
        percentage:
          type: float
      required:
        - order
        - codes
        - percentage

    DocumentText:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        document_id:
          $ref: '#/components/schemas/Id'
        text:
          type: string
        first_word:
          $ref: '#/components/schemas/WordCoordinate'
        last_word:
          $ref: '#/components/schemas/WordCoordinate'
      required:
        - document_id
        - text
        - first_word
        - last_word

    Id:
      type: integer
      format: int64
      description: A unique identifier within the class of the specific object it is referencing

    File:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        type:
          $ref: '#/components/schemas/FileType'
        name:
          type: string
        ext:
          type: string
      required:
        - id
        - type
        - name
        - ext

    FileUpload:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
            format: binary

    Project:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        year:
          type: integer
          format: int32
        month:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
      required:
        - year
        - month
        - name
        - description

    WordCoordinate:
      type: object
      properties:
        paragraph:
          type: integer
        sentence:
          type: integer
        word:
          type: integer
      required:
        - paragraph
        - sentence
        - word

    Word:
      type: string

    Sentence:
      type: object
      properties:
        words:
          type: array
          items:
            $ref: '#/components/schemas/Word'
      required:
        - words
    Paragraph:
      type: object
      properties:
        sentences:
          type: array
          items:
            $ref: '#/components/schemas/Sentence'
      required:
        - sentences

    Demo:
      type: object
      properties:
        columns:
          type: array
          items:
            type: string
        values:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

    Source:
      type: object
      properties:
        paragraphs:
          type: array
          items:
            $ref: '#/components/schemas/Paragraph'
      required:
        - paragraphs

    FileType:
      type: string
      enum:
        - KSOURCE
        - KDEMO

paths:
  /code:
    get:
      parameters:
        - $ref: '#/components/parameters/codeId'
      responses:
        200:
          description: returns the requested code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Code'
      responses:
        200:
          description: returns the newly created code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'

  /code_container:
    post:
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: creates an empty code container on the project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeContainer'


  /code_containers:
    get:
      parameters:
        - $ref: '#/components/parameters/projectId'

      responses:
        200:
          description: returns all code containers for the specified project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CodeContainer'
  /demo:
    post:
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: successful upload, returns uploaded file
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'

      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUpload'

    get:
      parameters:
        - $ref: '#/components/parameters/fileId'
      responses:
        200:
          description: requested document was successfully parsed and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demo'
        400:
          description: request document file type does not match file type registered for the document

  /files:
    get:
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: returns all files for the project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'

  /source:
    post:
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: successful upload, returns uploaded source file
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUpload'

    get:
      parameters:
        - $ref: '#/components/parameters/fileId'
      responses:
        200:
          description: requested document was successfully parsed and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        400:
          description: request document file type does not match file type registered for the document

  /document_text:
    post:
      parameters:
        - $ref: '#/components/parameters/codeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentText'
      responses:
        200:
          description: returns the newly created document text
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentText'
    delete:
      parameters:
        - $ref: '#/components/parameters/textId'
      responses:
        200:
          description: text was successfully deleted



